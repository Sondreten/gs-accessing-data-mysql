package hello;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.Data;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import javax.rmi.CORBA.ValueHandler;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/search") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private BaanRepository baanRepository;

	@Autowired
	private PortRepository portRepository;


	@Autowired
	private FleetmonRepository fleetmonRepository;

	@GetMapping(path = "/boat/all")
	public @ResponseBody
	Iterable<Baan> getAllUsers() {
		// This returns a JSON or XML with the users
		return baanRepository.findAll();
	}

	@GetMapping(path = "/ports/all")
	public @ResponseBody
	Iterable<Port> getAllPorts() {
		// This returns a JSON or XML with the users
		return portRepository.findAll();
	}

	@GetMapping(path = "/fleetmon/all")
	public @ResponseBody
	Iterable<Fleetmon> getAllFleetmonData() {
		// This returns a JSON or XML with the users
		return fleetmonRepository.findAll();
	}

	@GetMapping("/boat/{id}")
	public @ResponseBody
	Baan getBoatById(@PathVariable(value = "id") int id) {
		return baanRepository.findById(id);
	}

/*
	@RequestMapping(value="/fleetmon/update", method=RequestMethod.GET)
	public @ResponseBody List<Fleetmon> findAllObjects() {

		RestTemplate restTemplate = new RestTemplate();

		ResponseEntity<List<Fleetmon>> rateResponse =
				restTemplate.exchange("https://www.fleetmon.com/api/p/personal-v1/myfleet/?username=sondrete&api_key=606d7be6076e2bf1497d58cb7d2985689b32b43c&format=json",
						HttpMethod.GET, null, new ParameterizedTypeReference<List<Fleetmon>>() {
						});
		List<Fleetmon> rates = rateResponse.getBody();

		fleetmonRepository.saveAll(rates);
		return rates;
	}
*/
/*
	@RequestMapping(value="/fleetmon/update", method=RequestMethod.GET)
	public @ResponseBody List<Fleetmon> findAllObjects() {

		RestTemplate restTemplate = new RestTemplate();
		String urlGETList = "https://www.fleetmon.com/api/p/personal-v1/myfleet/?username=sondrete&api_key=606d7be6076e2bf1497d58cb7d2985689b32b43c&format=json";

		ResponseEntity<Fleetmon[]> responseEntity = restTemplate.getForEntity(urlGETList, Fleetmon[].class);
		Fleetmon[] fleetmons = responseEntity.getBody();
		MediaType contentType = responseEntity.getHeaders().getContentType();
		HttpStatus statusCode = responseEntity.getStatusCode();

		List<Fleetmon> objects = new ArrayList<Fleetmon>();

		fleetmonRepository.saveAll(objects);
		return objects;
	}
	*/

	@RequestMapping(value = "/resttemp", method = RequestMethod.GET, produces = "application/json")
	@CrossOrigin(origins = "http://localhost:3000")
	public @ResponseBody String testingRestTemp() throws JSONException {
		final RestTemplate restTemplate = new RestTemplate();
		final String response = restTemplate.getForObject("https://www.fleetmon.com/api/p/personal-v1/myfleet/?username=sondrete&api_key=606d7be6076e2bf1497d58cb7d2985689b32b43c&format=json", String.class);

		JSONObject obj_JSONObject = new JSONObject(response);
		JSONArray obj_JSONArray = obj_JSONObject.getJSONArray("objects");

		List fleetmons = new ArrayList();
		List allFleetmon = new ArrayList();
		if (obj_JSONArray != null) {
			for (int i = 0; i < obj_JSONArray.length(); i++) {
				fleetmons.add(obj_JSONArray.getString(i));
				JSONObject listobject = obj_JSONArray.getJSONObject(i);


				String vessels = listobject.get("vessel").toString();
				JSONObject vesselobject = new JSONObject(vessels);
				String etatime = vesselobject.get("etatime").toString();
				String imonumber = vesselobject.get("imonumber").toString();


				String nextport = vesselobject.get("nextport").toString();

				String nullprefix = "null";
				if (nextport != nullprefix && etatime!= nullprefix) {

					String nextportjson = vesselobject.get("nextport").toString();
					JSONObject nextportobject = new JSONObject(nextportjson);

					String locode = nextportobject.get("locode").toString();
					nextport = locode;

					int imonumberInt = Integer.parseInt(imonumber);
					Fleetmon fleet = new Fleetmon();
					fleet.setImonumber(imonumberInt);
					fleet.setEtatime(etatime);
					fleet.setNextport(nextport);

					fleetmonRepository.save(fleet);

				}
				else{

				}

			}
			}

			return response;
		}
}
